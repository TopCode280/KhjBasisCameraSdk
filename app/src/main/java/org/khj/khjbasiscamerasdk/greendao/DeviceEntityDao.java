package org.khj.khjbasiscamerasdk.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import org.khj.khjbasiscamerasdk.database.entity.DeviceEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DEVICE_ENTITY".
*/
public class DeviceEntityDao extends AbstractDao<DeviceEntity, Long> {

    public static final String TABLENAME = "DEVICE_ENTITY";

    /**
     * Properties of entity DeviceEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property DeviceInfoId = new Property(1, String.class, "deviceInfoId", false, "DEVICE_INFO_ID");
        public final static Property DeviceUid = new Property(2, String.class, "deviceUid", false, "DEVICE_UID");
        public final static Property DeviceName = new Property(3, String.class, "deviceName", false, "DEVICE_NAME");
        public final static Property DeviceAccount = new Property(4, String.class, "deviceAccount", false, "DEVICE_ACCOUNT");
        public final static Property DevicePwd = new Property(5, String.class, "devicePwd", false, "DEVICE_PWD");
        public final static Property DeviceVersion = new Property(6, String.class, "deviceVersion", false, "DEVICE_VERSION");
        public final static Property DeviceConfigs = new Property(7, String.class, "deviceConfigs", false, "DEVICE_CONFIGS");
        public final static Property DeviceRemark = new Property(8, String.class, "deviceRemark", false, "DEVICE_REMARK");
        public final static Property DeviceStatus = new Property(9, String.class, "deviceStatus", false, "DEVICE_STATUS");
        public final static Property OwnFlag = new Property(10, String.class, "ownFlag", false, "OWN_FLAG");
        public final static Property CreatedDate = new Property(11, String.class, "createdDate", false, "CREATED_DATE");
        public final static Property UpdatedDate = new Property(12, String.class, "updatedDate", false, "UPDATED_DATE");
        public final static Property UserId = new Property(13, Long.class, "userId", false, "USER_ID");
        public final static Property Order = new Property(14, int.class, "order", false, "ORDER");
        public final static Property IsAdmin = new Property(15, boolean.class, "isAdmin", false, "IS_ADMIN");
        public final static Property Background = new Property(16, String.class, "background", false, "BACKGROUND");
        public final static Property Reserve1 = new Property(17, String.class, "reserve1", false, "RESERVE1");
        public final static Property Reserve2 = new Property(18, String.class, "reserve2", false, "RESERVE2");
        public final static Property Reserve3 = new Property(19, String.class, "reserve3", false, "RESERVE3");
        public final static Property Reserve4 = new Property(20, String.class, "reserve4", false, "RESERVE4");
        public final static Property VideoPath = new Property(21, int.class, "videoPath", false, "VIDEO_PATH");
        public final static Property Ptz = new Property(22, int.class, "ptz", false, "PTZ");
        public final static Property RecType = new Property(23, int.class, "recType", false, "REC_TYPE");
        public final static Property StorageTime = new Property(24, int.class, "storageTime", false, "STORAGE_TIME");
        public final static Property Status = new Property(25, int.class, "status", false, "STATUS");
        public final static Property EndTime = new Property(26, Long.class, "endTime", false, "END_TIME");
        public final static Property IsOpenCloud = new Property(27, int.class, "isOpenCloud", false, "IS_OPEN_CLOUD");
    }


    public DeviceEntityDao(DaoConfig config) {
        super(config);
    }
    
    public DeviceEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DEVICE_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"DEVICE_INFO_ID\" TEXT," + // 1: deviceInfoId
                "\"DEVICE_UID\" TEXT," + // 2: deviceUid
                "\"DEVICE_NAME\" TEXT," + // 3: deviceName
                "\"DEVICE_ACCOUNT\" TEXT," + // 4: deviceAccount
                "\"DEVICE_PWD\" TEXT," + // 5: devicePwd
                "\"DEVICE_VERSION\" TEXT," + // 6: deviceVersion
                "\"DEVICE_CONFIGS\" TEXT," + // 7: deviceConfigs
                "\"DEVICE_REMARK\" TEXT," + // 8: deviceRemark
                "\"DEVICE_STATUS\" TEXT," + // 9: deviceStatus
                "\"OWN_FLAG\" TEXT," + // 10: ownFlag
                "\"CREATED_DATE\" TEXT," + // 11: createdDate
                "\"UPDATED_DATE\" TEXT," + // 12: updatedDate
                "\"USER_ID\" INTEGER," + // 13: userId
                "\"ORDER\" INTEGER NOT NULL ," + // 14: order
                "\"IS_ADMIN\" INTEGER NOT NULL ," + // 15: isAdmin
                "\"BACKGROUND\" TEXT," + // 16: background
                "\"RESERVE1\" TEXT," + // 17: reserve1
                "\"RESERVE2\" TEXT," + // 18: reserve2
                "\"RESERVE3\" TEXT," + // 19: reserve3
                "\"RESERVE4\" TEXT," + // 20: reserve4
                "\"VIDEO_PATH\" INTEGER NOT NULL ," + // 21: videoPath
                "\"PTZ\" INTEGER NOT NULL ," + // 22: ptz
                "\"REC_TYPE\" INTEGER NOT NULL ," + // 23: recType
                "\"STORAGE_TIME\" INTEGER NOT NULL ," + // 24: storageTime
                "\"STATUS\" INTEGER NOT NULL ," + // 25: status
                "\"END_TIME\" INTEGER," + // 26: endTime
                "\"IS_OPEN_CLOUD\" INTEGER NOT NULL );"); // 27: isOpenCloud
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_DEVICE_ENTITY_DEVICE_UID_USER_ID ON \"DEVICE_ENTITY\"" +
                " (\"DEVICE_UID\" ASC,\"USER_ID\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DEVICE_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DeviceEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String deviceInfoId = entity.getDeviceInfoId();
        if (deviceInfoId != null) {
            stmt.bindString(2, deviceInfoId);
        }
 
        String deviceUid = entity.getDeviceUid();
        if (deviceUid != null) {
            stmt.bindString(3, deviceUid);
        }
 
        String deviceName = entity.getDeviceName();
        if (deviceName != null) {
            stmt.bindString(4, deviceName);
        }
 
        String deviceAccount = entity.getDeviceAccount();
        if (deviceAccount != null) {
            stmt.bindString(5, deviceAccount);
        }
 
        String devicePwd = entity.getDevicePwd();
        if (devicePwd != null) {
            stmt.bindString(6, devicePwd);
        }
 
        String deviceVersion = entity.getDeviceVersion();
        if (deviceVersion != null) {
            stmt.bindString(7, deviceVersion);
        }
 
        String deviceConfigs = entity.getDeviceConfigs();
        if (deviceConfigs != null) {
            stmt.bindString(8, deviceConfigs);
        }
 
        String deviceRemark = entity.getDeviceRemark();
        if (deviceRemark != null) {
            stmt.bindString(9, deviceRemark);
        }
 
        String deviceStatus = entity.getDeviceStatus();
        if (deviceStatus != null) {
            stmt.bindString(10, deviceStatus);
        }
 
        String ownFlag = entity.getOwnFlag();
        if (ownFlag != null) {
            stmt.bindString(11, ownFlag);
        }
 
        String createdDate = entity.getCreatedDate();
        if (createdDate != null) {
            stmt.bindString(12, createdDate);
        }
 
        String updatedDate = entity.getUpdatedDate();
        if (updatedDate != null) {
            stmt.bindString(13, updatedDate);
        }
 
        Long userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(14, userId);
        }
        stmt.bindLong(15, entity.getOrder());
        stmt.bindLong(16, entity.getIsAdmin() ? 1L: 0L);
 
        String background = entity.getBackground();
        if (background != null) {
            stmt.bindString(17, background);
        }
 
        String reserve1 = entity.getReserve1();
        if (reserve1 != null) {
            stmt.bindString(18, reserve1);
        }
 
        String reserve2 = entity.getReserve2();
        if (reserve2 != null) {
            stmt.bindString(19, reserve2);
        }
 
        String reserve3 = entity.getReserve3();
        if (reserve3 != null) {
            stmt.bindString(20, reserve3);
        }
 
        String reserve4 = entity.getReserve4();
        if (reserve4 != null) {
            stmt.bindString(21, reserve4);
        }
        stmt.bindLong(22, entity.getVideoPath());
        stmt.bindLong(23, entity.getPtz());
        stmt.bindLong(24, entity.getRecType());
        stmt.bindLong(25, entity.getStorageTime());
        stmt.bindLong(26, entity.getStatus());
 
        Long endTime = entity.getEndTime();
        if (endTime != null) {
            stmt.bindLong(27, endTime);
        }
        stmt.bindLong(28, entity.getIsOpenCloud());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DeviceEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String deviceInfoId = entity.getDeviceInfoId();
        if (deviceInfoId != null) {
            stmt.bindString(2, deviceInfoId);
        }
 
        String deviceUid = entity.getDeviceUid();
        if (deviceUid != null) {
            stmt.bindString(3, deviceUid);
        }
 
        String deviceName = entity.getDeviceName();
        if (deviceName != null) {
            stmt.bindString(4, deviceName);
        }
 
        String deviceAccount = entity.getDeviceAccount();
        if (deviceAccount != null) {
            stmt.bindString(5, deviceAccount);
        }
 
        String devicePwd = entity.getDevicePwd();
        if (devicePwd != null) {
            stmt.bindString(6, devicePwd);
        }
 
        String deviceVersion = entity.getDeviceVersion();
        if (deviceVersion != null) {
            stmt.bindString(7, deviceVersion);
        }
 
        String deviceConfigs = entity.getDeviceConfigs();
        if (deviceConfigs != null) {
            stmt.bindString(8, deviceConfigs);
        }
 
        String deviceRemark = entity.getDeviceRemark();
        if (deviceRemark != null) {
            stmt.bindString(9, deviceRemark);
        }
 
        String deviceStatus = entity.getDeviceStatus();
        if (deviceStatus != null) {
            stmt.bindString(10, deviceStatus);
        }
 
        String ownFlag = entity.getOwnFlag();
        if (ownFlag != null) {
            stmt.bindString(11, ownFlag);
        }
 
        String createdDate = entity.getCreatedDate();
        if (createdDate != null) {
            stmt.bindString(12, createdDate);
        }
 
        String updatedDate = entity.getUpdatedDate();
        if (updatedDate != null) {
            stmt.bindString(13, updatedDate);
        }
 
        Long userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(14, userId);
        }
        stmt.bindLong(15, entity.getOrder());
        stmt.bindLong(16, entity.getIsAdmin() ? 1L: 0L);
 
        String background = entity.getBackground();
        if (background != null) {
            stmt.bindString(17, background);
        }
 
        String reserve1 = entity.getReserve1();
        if (reserve1 != null) {
            stmt.bindString(18, reserve1);
        }
 
        String reserve2 = entity.getReserve2();
        if (reserve2 != null) {
            stmt.bindString(19, reserve2);
        }
 
        String reserve3 = entity.getReserve3();
        if (reserve3 != null) {
            stmt.bindString(20, reserve3);
        }
 
        String reserve4 = entity.getReserve4();
        if (reserve4 != null) {
            stmt.bindString(21, reserve4);
        }
        stmt.bindLong(22, entity.getVideoPath());
        stmt.bindLong(23, entity.getPtz());
        stmt.bindLong(24, entity.getRecType());
        stmt.bindLong(25, entity.getStorageTime());
        stmt.bindLong(26, entity.getStatus());
 
        Long endTime = entity.getEndTime();
        if (endTime != null) {
            stmt.bindLong(27, endTime);
        }
        stmt.bindLong(28, entity.getIsOpenCloud());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DeviceEntity readEntity(Cursor cursor, int offset) {
        DeviceEntity entity = new DeviceEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // deviceInfoId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // deviceUid
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // deviceName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // deviceAccount
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // devicePwd
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // deviceVersion
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // deviceConfigs
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // deviceRemark
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // deviceStatus
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // ownFlag
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // createdDate
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // updatedDate
            cursor.isNull(offset + 13) ? null : cursor.getLong(offset + 13), // userId
            cursor.getInt(offset + 14), // order
            cursor.getShort(offset + 15) != 0, // isAdmin
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // background
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // reserve1
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // reserve2
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // reserve3
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // reserve4
            cursor.getInt(offset + 21), // videoPath
            cursor.getInt(offset + 22), // ptz
            cursor.getInt(offset + 23), // recType
            cursor.getInt(offset + 24), // storageTime
            cursor.getInt(offset + 25), // status
            cursor.isNull(offset + 26) ? null : cursor.getLong(offset + 26), // endTime
            cursor.getInt(offset + 27) // isOpenCloud
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DeviceEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDeviceInfoId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDeviceUid(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDeviceName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDeviceAccount(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDevicePwd(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDeviceVersion(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setDeviceConfigs(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setDeviceRemark(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setDeviceStatus(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setOwnFlag(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setCreatedDate(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setUpdatedDate(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setUserId(cursor.isNull(offset + 13) ? null : cursor.getLong(offset + 13));
        entity.setOrder(cursor.getInt(offset + 14));
        entity.setIsAdmin(cursor.getShort(offset + 15) != 0);
        entity.setBackground(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setReserve1(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setReserve2(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setReserve3(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setReserve4(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setVideoPath(cursor.getInt(offset + 21));
        entity.setPtz(cursor.getInt(offset + 22));
        entity.setRecType(cursor.getInt(offset + 23));
        entity.setStorageTime(cursor.getInt(offset + 24));
        entity.setStatus(cursor.getInt(offset + 25));
        entity.setEndTime(cursor.isNull(offset + 26) ? null : cursor.getLong(offset + 26));
        entity.setIsOpenCloud(cursor.getInt(offset + 27));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DeviceEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DeviceEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DeviceEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
